[server]
host: 0.0.0.0
port: 7125
# The maximum size allowed for a file upload (in MiB).  Default 1024 MiB
max_upload_size: 1024
# Path to klippy Unix Domain Socket
klippy_uds_address: ~/printer_data/comms/klippy.sock

[file_manager]
# post processing for object cancel. Not recommended for low resource SBCs such as a Pi Zero. Default False
enable_object_processing: True

[authorization]
cors_domains:
    https://my.mainsail.xyz
    http://my.mainsail.xyz
    http://*.local
    http://*.lan
trusted_clients:
    10.0.0.0/8
    127.0.0.0/8
    169.254.0.0/16
    172.16.0.0/12
    192.168.0.0/16
    FE80::/10
    ::1/128

# enables partial support of Octoprint API
[octoprint_compat]

# enables moonraker to track and store print history.
[history]

# this enables moonraker announcements for mainsail
[announcements]
subscriptions:
    mainsail

# this enables moonraker's update manager
[update_manager]
refresh_interval: 168
enable_auto_refresh: True

[update_manager mainsail]
type: web
channel: stable
repo: mainsail-crew/mainsail
path: ~/mainsail

[update_manager mainsail-config]
type: git_repo
primary_branch: master
path: ~/mainsail-config
origin: https://github.com/mainsail-crew/mainsail-config.git
managed_services: klipper

### moonraker-timelapse
### Don't forget to include timelapse.cfg to your printer.cfg
### Uncomment to enable moonraker-timelapse


#[update_manager timelapse]
#type: git_repo
#primary_branch: main
#path: ~/moonraker-timelapse
#origin: https://github.com/mainsail-crew/moonraker-timelapse.git
#managed_services: klipper moonraker

#[timelapse]
###   Directory where the generated video will be saved
#output_path: ~/timelapse/
###   Directory where ffmpeg is installed
#ffmpeg_binary_path: /usr/bin/ffmpeg

# Crowsnest update_manager entry
[update_manager crowsnest]
type: git_repo
path: ~/crowsnest
origin: https://github.com/mainsail-crew/crowsnest.git
managed_services: crowsnest
install_script: tools/pkglist.

# Sonar update_manager entry
[update_manager sonar]
type: git_repo
path: ~/sonar
origin: https://github.com/mainsail-crew/sonar.git
primary_branch: main
managed_services: sonar
install_script: tools/install.sh


[update_manager led_effect]
type: git_repo
path: ~/klipper-led_effect
origin: https://github.com/julianschill/klipper-led_effect.git
is_system_service: False

# WEMO CONTROL
[power Wemo]
type: http
off_when_shutdown: True
locked_while_printing: True
restart_klipper_when_powered: True
on_when_job_queued: True
restart_delay: 2
bound_services: klipper
on_url: http://192.168.1.209:49152/upnp/control/basicevent1 # Some Wemo devices might use 49153
off_url: http://192.168.1.209:49152/upnp/control/basicevent1
status_url: http://192.168.1.209:49152/upnp/control/basicevent1
request_template:
    # Keep in mind semicolons (U+003B) and hash signs (U+0023) must be escaped unicode literals
    # If \# is used instead to bypass the configuration comment interpreter jinja2 will still see \# in the string instead of #
    {% do http_request.set_method("POST") %}
    {% set content_type_bearer = 'text/xml\u003b charset=\"utf-8\"' %}
    {% if command in ["status"] %}
      {% do log_debug("Attempting to send Wemo status request") %}     
      {% set soap_action_bearer = '\"urn:Belkin:service:basicevent:1\u0023GetBinaryState\"' %}
      {% set xml_body = '<?xml version="1.0" encoding="utf-8"?><s:Envelope xmlns:s="http://schemas.xmlsoap.org/soap/envelope/" s:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"><s:Body><u:GetBinaryState xmlns:u="urn:Belkin:service:basicevent:1"></u:GetBinaryState></s:Body></s:Envelope>' %}
      {% do http_request.add_header("CONTENT-TYPE", content_type_bearer) %}
      {% do http_request.add_header("SOAPACTION", soap_action_bearer) %}
      {% do http_request.set_body(xml_body) %}
      {% do http_request.send() %}
    {% endif %}
    {% if command in ["on", "off"] %}
      {% set soap_action_bearer = '\"urn:Belkin:service:basicevent:1\u0023SetBinaryState\"' %}
      {% do http_request.add_header("CONTENT-TYPE", content_type_bearer) %}
      {% do http_request.add_header("SOAPACTION", soap_action_bearer) %}
      {% if command == "on" %}
          {% do log_debug("Attempting to send Wemo power-on request") %}
          {% set xml_body = '<?xml version="1.0" encoding="utf-8"?><s:Envelope xmlns:s="http://schemas.xmlsoap.org/soap/envelope/" s:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"><s:Body><u:SetBinaryState xmlns:u="urn:Belkin:service:basicevent:1"><BinaryState>1</BinaryState></u:SetBinaryState></s:Body></s:Envelope>' %}
      {% elif command == "off" %}
          {% do log_debug("Attempting to send Wemo power-off request") %}
          {% set xml_body = '<?xml version="1.0" encoding="utf-8"?><s:Envelope xmlns:s="http://schemas.xmlsoap.org/soap/envelope/" s:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"><s:Body><u:SetBinaryState xmlns:u="urn:Belkin:service:basicevent:1"><BinaryState>0</BinaryState></u:SetBinaryState></s:Body></s:Envelope>' %}
      {% endif %}
      {% do http_request.set_body(xml_body) %}
      {% do http_request.send() %}
    {% endif %}
response_template:
  {% do log_debug("Got status code " ~ http_request.last_response().status_code) %}
  {% if http_request.last_response().status_code == 200 %}
      {% set start_tag = '<BinaryState>' %}
      {% set end_tag = '</BinaryState>' %}
      {% set start_index = http_request.last_response().text.find(start_tag) + start_tag|length %}
      {% set end_index = http_request.last_response().text.find(end_tag) %}
      {% set binary_state = http_request.last_response().text[start_index:end_index] %}
      {% do log_debug("Plug state binary is " ~ binary_state) %}
      {% if binary_state == "1" %}
          {% do log_debug("Plug marked as on") %}
          {"on"}
      {% else %}
          {% do log_debug("Plug marked as off") %}
          {"off"}
      {% endif %}
  {% endif %}


[include octoeverywhere-system.cfg]
[update_manager klipper-backup]
type: git_repo
path: ~/klipper-backup
origin: https://github.com/Staubgeborener/klipper-backup.git
managed_services: moonraker
primary_branch: main
[update_manager mobileraker]
install_script: /home/pi/mobileraker_companion/scripts/install.sh
requirements: /home/pi/mobileraker_companion/scripts/mobileraker-requirements.txt
env: /home/pi/mobileraker-env/bin/python
managed_services: mobileraker
primary_branch: main
origin: https://github.com/Clon1998/mobileraker_companion.git
path: /home/pi/mobileraker_companion
type: git_repo

[update_manager Klipper-Adaptive-Meshing-Purging]
type: git_repo
channel: dev
path: ~/Klipper-Adaptive-Meshing-Purging
origin: https://github.com/kyleisah/Klipper-Adaptive-Meshing-Purging.git
managed_services: klipper
primary_branch: main
